/**
 * @description
 * This file defines the TypeScript interface for a Trade Log entry.
 * It corresponds to the `TradeLog` model defined in the Prisma schema.
 *
 * @dependencies
 * - None
 *
 * @notes
 * - This type is used for storing and retrieving records of trades executed
 * through the application, primarily via `log-actions.ts`.
 */

/**
 * Represents a single entry in the application's trade log.
 * Records details about trades executed via the application, including success/failure status.
 *
 * @property {string} id - Unique identifier for the log entry (generated by Prisma).
 * @property {Date} timestamp - Timestamp when the log entry was created (managed by Prisma).
 * @property {string} symbol - The symbol of the traded asset (e.g., "BTC-PERP").
 * @property {string} direction - The direction of the trade ('long' or 'short').
 * @property {number} size - The size of the trade (e.g., in BTC units).
 * @property {number} entryPrice - The execution price of the trade.
 * @property {string} status - The status of the trade execution ('filled', 'failed', 'pending').
 * @property {string | null} hyperliquidOrderId - The Order ID returned by Hyperliquid on successful execution, if applicable. Null otherwise.
 * @property {string | null} errorMessage - Error message if the trade execution failed. Null otherwise.
 */
export interface TradeLogEntry {
    id: string;
    timestamp: Date;
    symbol: string;
    direction: string; // 'long' | 'short' - Using string for flexibility if other types arise
    size: number;
    entryPrice: number;
    status: string; // 'filled' | 'failed' | 'pending' - Using string for flexibility
    hyperliquidOrderId?: string | null; // Optional, may not exist on failure
    errorMessage?: string | null; // Optional, only present on failure
  }